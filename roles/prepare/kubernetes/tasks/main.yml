- name: 下载解压 kubeadm kubelet kubectl 二进制文件和 apiserver controller-manager kube-scheduler 镜像文件
  unarchive:
    src: "http://{{local_hostname}}:{{repo_port}}/repository/raw/k8s/k8s.tar.gz"
    dest: "{{ base_dir }}/"
    mode: "0755"
    copy: no

- name: 拷贝 kubeadm kubelet kubectl 二进制文件
  copy:
    src: "{{ base_dir}}/k8s/k8s-tools/{{ item }}"
    dest: "{{ bin_dir }}/"
    remote_src: yes
    mode: "0755"
  with_items:
  - kubeadm
  - kubelet
  - kubectl

- name: 下载解压基础 cni plugins
  unarchive:
    src: "http://{{local_hostname}}:{{repo_port}}/repository/raw/k8s/cni.tar.gz"
    dest: "{{ base_dir }}/"
    mode: "0755"
    copy: no

- name: 创建 cni 二进制文件存放目录
  file:
    name: "/opt/cni/bin"
    state: directory

- name: 拷贝 cni plugins 二进制文件
  copy:
    src: "{{ base_dir}}/cni/{{ item }}"
    dest: "/opt/cni/bin"
    remote_src: yes
    mode: "0755"
  with_items:
  - bridge
  - host-local
  - loopback
  - portmap

- name: prepare some dirs
  file: name={{ item }} state=directory
  with_items:
    - /etc/kubernetes/images
    - /etc/kubernetes/manifests
    - /usr/lib/systemd/system/kubelet.service.d

- name: 创建kubelet的systemd unit文件
  template: src=kubelet.service.j2 dest=/usr/lib/systemd/system/kubelet.service

- name: 创建kubelet的配置文件
  template: src=10-kubeadm.conf.j2 dest=/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf

- name: 创建kubelet的参数文件
  template: src=kubelet.config.j2 dest=/etc/sysconfig/kubelet

- name: 开机启用kubelet 服务
  shell: systemctl enable kubelet
  ignore_errors: true

- name: 配置 kubectl 命令自动补全
  lineinfile:
    dest: ~/.bashrc
    state: present
    regexp: 'kubectl completion'
    line: 'source <(kubectl completion bash)'

- block:
  - name: 下载 kube-master 镜像
    shell: "{{ bin_dir }}/docker pull {{ local_hostname }}:{{ registry_port }}/kubeoperator/{{ item }}"
    with_items:
    - kube-apiserver:{{ kube_version }}
    - kube-controller-manager:{{ kube_version }}
    - kube-scheduler:{{ kube_version }}
    when: container_runtime == 'docker'

  - name: 下载 kube-master 镜像
    shell: "{{ bin_dir }}/crictl pull  {{ local_hostname }}:{{ registry_port }}/kubeoperator/{{ item }} -n=k8s.io"
    with_items:
    - kube-apiserver:{{ kube_version }}
    - kube-controller-manager:{{ kube_version }}
    - kube-scheduler:{{ kube_version }}
    when: container_runtime == 'containerd'
  when: inventory_hostname in groups['kube-master']

- block:
  - block:
    - name: 下载 kube-proxy 镜像
      shell: "{{ bin_dir }}/docker pull {{ local_hostname }}:{{ registry_port }}/kubeoperator/{{ item }}"
      with_items:
      - kube-proxy:{{ kube_version }}

    - name: Docker | 下载 pause 镜像
      shell: "{{ bin_dir }}/docker pull {{ pod_infra_container_image }}"

    - name: Docker | 下载 coredns 镜像
      shell: "{{ bin_dir }}/docker pull {{ coredns_image }}"
    when: container_runtime == 'docker'

  - block:
    - name: 下载 kube-proxy 镜像
      shell: "{{ bin_dir }}/crictl pull {{ local_hostname }}:{{ registry_port }}/kubeoperator/{{ item }} -n=k8s.io"
      with_items:
      - kube-proxy:{{ kube_version }}

    - name: Containerd | 下载 pause 镜像
      shell: "{{ bin_dir }}/crictl pull {{ pod_infra_container_image }} -n=k8s.io"

    - name: Containerd | 下载 coredns 镜像
      shell: "{{ bin_dir }}/crictl pull {{ coredns_image }} -n=k8s.io"
    when: container_runtime == 'containerd'
  when: inventory_hostname in (groups['kube-worker'] + groups['new-worker'])